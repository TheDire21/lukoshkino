@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Authorization> Logger
@inject IdentityRedirectManager RedirectManager

<div class="body_panel">
    <div class="panel">
        <div class="avtorizaciya">
            <h3>Авторизация</h3>
        </div>
        <EditForm Model="@loginModel" method="post" OnValidSubmit="HandleLogin" FormName="loginForm" class="editform">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="input">
                <div class="log_pas_text">Email</div>
                <InputText placeholder="" type="text" style=" width: 500px; height: 40px; background-color: rgb(147,168,113, 0.5); border: 2px solid #FFFF; padding-inline:10px; border-radius: 5px; color: white" @bind-Value=loginModel.Email/>
                <ValidationMessage For="() => loginModel.Email" class="text-danger" />
            </div>
            <div class="input">
                <div class="log_pas_text">Пароль</div>
                <InputText placeholder="" type="password" style=" width: 500px; height: 40px; background-color: rgb(147,168,113, 0.5); border: 2px solid #FFFF; padding-inline:10px; border-radius: 5px; color: white" @bind-Value=loginModel.Password />
                <ValidationMessage For="() => loginModel.Password" class="text-danger" />
            </div>
            <div class="checkbox mb-3">
                <label style="color:white;">
                    <InputCheckbox @bind-Value="loginModel.RememberMe" style="color:white; margin-top: 1vw; " />  Запомнить меня</label>
            </div>
            <div>
                <button type="submit">Войти</button>
            </div>
        </EditForm>
        <div class="no-password">не помню пароль</div>
@*         <p><a href="@(Navigation.GetUriWithQueryParameters("/register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" style="text-decoration: none;">Зарегистрироваться</a></p> *@
    </div>  
</div>



@code
{
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }


    private async Task HandleLogin()
    { 
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(loginModel.Email, loginModel.Password, loginModel.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "/loginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = loginModel.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("/lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
        
    }
}
