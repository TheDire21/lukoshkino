@inject NavigationManager Navigation
@inject IDbContextFactory<ApplicationContext> DbFactory
@inject IdentityUserAccessor _userAccessor;

@rendermode RenderMode.InteractiveServer

<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="3000" Placement="ToastsPlacement.TopRight" />

<div class="kart">
	<button class="like" @onclick="ClickLike"><img src="@_likeImagePath" /></button>
	<NavLink href="catalog" @onclick="RedirectToEdit" style="text-decoration: none;">
		<img class="img-kart" src=@ImageData />
		<h3>@Product.Price ₽</h3>
		<p class="name">@Product.Name</p>
	</NavLink>
	<div class="but">
		<button @onclick="AddToBasket"><img src="basket.png"> В КОРЗИНУ</button>
	</div>

</div>

@code {
	[Parameter]
	public Product Product { get; set; }

	public string ImageData { get; set; } = "/prev.png";

	private ApplicationUser _user;

	private List<ToastMessage> messages = [];

	protected override async Task OnInitializedAsync()
	{
		_user = await _userAccessor.GetCurrentUserAsync();

		using (var ac = DbFactory.CreateDbContext())
		{
			if (_user is null || !ac.Likes.Any(x => x.UserId == _user.Id && x.ProductId == Product.Id))
			{
				_likeImagePath = "Like1.png";
				_isLiked = false;
			}
			else
			{
				_likeImagePath = "Like.png";
				_isLiked = true;
			}

			Product_Photo product_Photo = ac.Product_Photos.FirstOrDefault(x => x.ProductId == Product.Id);
			if (product_Photo == null)
			{
				return;
			}
			var ByteImageData = ac.Files.FirstOrDefault(x => x.Id == product_Photo.FileId).Path;
			string imagesrc = Convert.ToBase64String(ByteImageData);
			ImageData = string.Format("data:image/jpeg;base64,{0}", imagesrc);


		}
	}

	void RedirectToEdit()
	{
		Navigation.NavigateTo($"/catalog/product/{Product.Id}", true);
	}

	void RedirectToBasket()
	{
		Navigation.NavigateTo($"/basket", true);
	}

	private string _likeImagePath = "Like1.png";
	private bool _isLiked = false;

	void ClickLike()
	{
		if (_user is null)
		{
			Navigation.NavigateTo($"/login", true);
			return;
		}


		if (!_isLiked)
		{
			using (var ac = DbFactory.CreateDbContext())
			{
				ac.Likes.Add(new Like() { UserId = _user.Id, ProductId = Product.Id });
				ac.SaveChanges();
			}
			_likeImagePath = "Like.png";
			_isLiked = true;
		}
		else
		{
			using (var ac = DbFactory.CreateDbContext())
			{
				ac.Likes.Remove(ac.Likes.First(x => x.UserId == _user.Id && x.ProductId == Product.Id));
				ac.SaveChanges();
			}
			_likeImagePath = "Like1.png";
			_isLiked = false;
		}
	}

	void AddToBasket()
	{
		if (_user is null)
		{
			Navigation.NavigateTo($"/login", true);
			return;
		}

		using(var ac = DbFactory.CreateDbContext())
		{
			if(ac.Baskets.Any(x => x.UserId == _user.Id && x.ProductId == Product.Id))
			{
				messages.Add(new ToastMessage
						{
							Type = ToastType.Success,
							Title = "Внимание",
							Content = @<div>Товар уже в корзине<button @onclick="RedirectToBasket">Перейти</button></div>,
					});
			}
			else
			{
				ac.Baskets.Add(new Basket() { ProductId = Product.Id, UserId = _user.Id, Quantity = 1 });
				ac.SaveChanges();
				messages.Add(new ToastMessage
						{
							Type = ToastType.Success,
							Title = "Внимание",
							Content = @<div>Товар добавлен в корзину<button @onclick="RedirectToBasket">Перейти</button></div>,
				});
			}
			
		}
	}
}
