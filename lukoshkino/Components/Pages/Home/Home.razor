@page "/"
@layout MainLayout
@inject IDbContextFactory<ApplicationContext> DbFactory
@inject NavigationManager Navigation
@rendermode RenderMode.InteractiveServer


<PageTitle>Главная-Из лукошкино с любовью</PageTitle>
<div class="Top">
	<div class="body_info">
		<div class="ByCompany">
			<div class="info">
				<div class="text-btn">
					<h3>ИЗ ЛУКОШКИНО<br />С ЛЮБОВЬЮ</h3>
					<p>@GetHomePageTitleText()</p>
					<NavLink @onclick="RedirectToCatalog" href="catalog" style="text-decoration: none;">
						<button type="submit" href="Catalog">К КАТАЛОГУ<img src="Vector1.png" /></button>
					</NavLink>

				</div>
				<div class="Photo">
					<img src="Photo1.png" />
				</div>
			</div>
		</div>
	</div>
	<div class="body_Catalog">
		<div class="Catalog">
			<div class="butgrup">
				<NavMenu />
				<div class="lable_kart">
					<p>ПОПУЛЯРНЫЕ ТОВАРЫ</p>
				</div>
				<div class="kart">

					@foreach(var card in GetPopularProducts())
					{
						<CardGood Product="@card"/>
					}
				</div>
				<div class="lable_kart">
					<p>ВАМ МОЖЕТ ПОНРАВИТЬСЯ</p>
				</div>
				<div class="kart">

					@foreach (var card in GetLikeProducts())
					{
						<CardGood Product="@card" />
					}
				</div>
				<div class="foot"></div>
			</div>
		</div>
	</div>
</div>



@code
{
	List<Product> GetPopularProducts()
	{
		using (var ac = DbFactory.CreateDbContext())
		{
			return ac.Products.Where(x => x.isPopular).ToList();
		}
	}

	List<Product> GetLikeProducts()
	{
		using (var ac = DbFactory.CreateDbContext())
		{
			return ac.Products.Where(x => x.isLike).ToList();
		}
	}

	void RedirectToCatalog()
	{
		Navigation.NavigateTo("/catalog", true);
	}

	string GetHomePageTitleText()
	{
		using(var db = DbFactory.CreateDbContext())
		{
			return db.InterfaceTags.ToList().Find(x => x.Name == "ТекстНаГлавнойСтранице").Content;
		}
	}

}

	


