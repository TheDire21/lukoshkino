@page "/register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Registration> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ApplicationContext dbContext

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="RegisterModel" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterHandle" FormName="register">
            <DataAnnotationsValidator />
            <h2>Зарегистрироваться на сайте.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="RegisterModel.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Электронная почта</label>
                <ValidationMessage For="() => RegisterModel.Email" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="RegisterModel.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Пароль</label>
                <ValidationMessage For="() => RegisterModel.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="RegisterModel.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Подтвердите пароль</label>
                <ValidationMessage For="() => RegisterModel.ConfirmPassword" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Зарегистрироваться</button>
        </EditForm>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private RegisterModel RegisterModel { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    private IEnumerable<IdentityError>? identityErrors;

    public async Task RegisterHandle(EditContext editContext)
    {
        var user = new ApplicationUser()
            {
            };

        await UserStore.SetUserNameAsync(user, RegisterModel.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, RegisterModel.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, RegisterModel.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        var roleid = dbContext.Roles.FirstOrDefault(d => d.Name == "User")!.Id;


        dbContext.Add(new IdentityUserRole<long>()
            {
                UserId = user.Id,
                RoleId = roleid
            });

        await dbContext.SaveChangesAsync();

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("/confirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, RegisterModel.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "/registerConfirmation",
                new() { ["email"] = RegisterModel.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }
}
