@page "/catalog/{id:int}"
@layout MainLayout
@inject IDbContextFactory<ApplicationContext> DbFactory
@inject IJSRuntime JSRuntime

<div class="body_panel">
    <div class="panel">
        <div class="good-info">
            <div class="good-img">
                <img src=@ImageData />
            </div>
            <div class="good-text">
                <h3>@Product.Name</h3>
                <p>@Product.Description</p>
            </div>
            <div class="good-bascet">
                <div class="vitrina">
                    <h3>@Product.Price</h3>
                    <button>В КОРЗИНУ</button>
                </div>
                <div>
                    <p>покупают вместе</p>
                </div>
                <div>

                </div>
            </div>
        </div>
        <div class="lable_kart">
            <p>ПОПУЛЯРНЫЕ ТОВАРЫ</p>
        </div>
        <div class="kart">

            @foreach (var card in GetPopularProducts())
            {
                <CardGood Product="@card" />
            }
        </div>
        <div class="footer"></div>
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; } = 0;

    public Product? Product { get; set; } = new Product();

    public string ImageData { get; set; } = "/prev.png";


    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            using (var ac = DbFactory.CreateDbContext())
            {
                Product = ac.Products.Where(x => x.Id == Id).FirstOrDefault();
                Product_Photo product_Photo = ac.Product_Photos.FirstOrDefault(x => x.ProductId == Product.Id);
                if (product_Photo == null)
                {
                    return;
                }
                var ByteImageData = ac.Files.FirstOrDefault(x => x.Id == product_Photo.FileId).Path;
                string imagesrc = Convert.ToBase64String(ByteImageData);
                ImageData = string.Format("data:image/jpeg;base64,{0}", imagesrc);
            }
        });
    }



    List<Product> GetPopularProducts()
    {
        using (var ac = DbFactory.CreateDbContext())
        {
            return ac.Products.Where(x => x.isPopular).ToList();
        }
    }
}
