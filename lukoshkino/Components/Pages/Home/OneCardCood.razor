@page "/catalog/product/{id:int}"
@layout MainLayout
@inject IDbContextFactory<ApplicationContext> DbFactory
@inject NavigationManager Navigation
@inject IdentityUserAccessor _userAccessor
@rendermode RenderMode.InteractiveServer

<div class="body_panel">
    <div class="panel">
        <div class="good-info">
            <div class="good-img">
                <img src=@ImageData />
            </div>
            <div class="good-text">
                <h3>@Product.Name</h3>
                <p>@Product.Description</p>
            </div>
            <div class="good-bascet">
                <div class="vitrina">
                    <div class="price_like">
                        <h3>@Product.Price ₽</h3>
                        <button class="like" @onclick="ClickLike"><img src="@_likeImagePath" /></button>
                    </div>
                    <button class="btn_basket">В КОРЗИНУ</button>
                </div>
                <div>
                    <p>покупают вместе</p>
                </div>
                <div>

                </div>
            </div>
        </div>
        <div class="lable_kart">
            <p>ПОПУЛЯРНЫЕ ТОВАРЫ</p>
        </div>
        <div class="kart">

            @foreach (var card in GetPopularProducts())
            {
                <CardGood Product="@card" />
            }
        </div>
        <div class="footer"></div>
    </div>
</div>

@code {

    [Parameter]
    public int Id { get; set; } = 0;

    public Product? Product { get; set; } = new Product();

    public string ImageData { get; set; } = "/prev.png";

    private ApplicationUser _user;

    protected override async Task OnInitializedAsync()
    {
        _user = await _userAccessor.GetCurrentUserAsync();


        using (var ac = DbFactory.CreateDbContext())
        {
            if (_user is null || !ac.Likes.Any(x => x.UserId == _user.Id && x.ProductId == Id))
            {
                _likeImagePath = "Like1.svg";
                _isLiked = false;
            }
            else
            {
                _likeImagePath = "Like.png";
                _isLiked = true;
            }

            Product = ac.Products.Where(x => x.Id == Id).FirstOrDefault();
            Product_Photo product_Photo = ac.Product_Photos.FirstOrDefault(x => x.ProductId == Product.Id);
            if (product_Photo == null)
            {
                return;
            }
            var ByteImageData = ac.Files.FirstOrDefault(x => x.Id == product_Photo.FileId).Path;
            string imagesrc = Convert.ToBase64String(ByteImageData);
            ImageData = string.Format("data:image/jpeg;base64,{0}", imagesrc);
        }
    }



    List<Product> GetPopularProducts()
    {
        using (var ac = DbFactory.CreateDbContext())
        {
            return ac.Products.Where(x => x.isPopular).ToList();
        }
    }

    private string _likeImagePath = "Like.png";

    private bool _isLiked = false;

    void ClickLike()
    {
        if (_user is null)
        {
            Navigation.NavigateTo($"/login", true);
            return;
        }

        if (!_isLiked)
        {
            using (var ac = DbFactory.CreateDbContext())
            {
                ac.Likes.Add(new Like() { UserId = _user.Id, ProductId = Product.Id });
                ac.SaveChanges();
            }
            _likeImagePath = "Like.png";
            _isLiked = true;
        }
        else
        {
            using (var ac = DbFactory.CreateDbContext())
            {
                ac.Likes.Remove(ac.Likes.First(x => x.UserId == _user.Id && x.ProductId == Product.Id));
                ac.SaveChanges();
            }
            _likeImagePath = "Like1.svg";
            _isLiked = false;
        }
    }
}
